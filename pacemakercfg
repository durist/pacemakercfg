#!/usr/bin/perl -w

use strict;
use English;
use XML::Twig;
use Getopt::Long;

my $help;
my $no_verify;
my $dry_run;
my $file;
my $bump_epoch;
&GetOptions (
    'help|h' => \$help,
    'no-verify|n' =>  \$no_verify,
    'dry-run|d' => \$dry_run,
    'f|file=s' => \$file,
    'bump-epoch|b' => \$bump_epoch
    ) or die("$0: Error processing command line arguments\n");

&usage if $help or scalar(@ARGV) != 1;

die("$0: Must be root to use\n") unless $EUID == 0;

my $xmldir = shift(@ARGV);
die("$0: XML directory \"$xmldir\" doesn't exist\n")
    unless -d $xmldir;

#
# Get the CIB
#
open(CIB, "cibadmin -Q|") 
    or die("$0: Could not open pipe from cibadmin: $! $?\n");
my $cib = join("", <CIB>);
close CIB;

#
# Parse the CIB
#
my $merge_t = XML::Twig->new(
    comments => 'drop',
    pretty_print => 'indented'
    );
$merge_t->parse($cib);
my $configuration = $merge_t->root->first_child('configuration');

#
# Delete the old section, paste in the new
#
my $chunks = &build_xmlchunkhash;
while( my($section, $chunk) = each %{$chunks} ){
    my $section_r = $configuration->first_child($section);
    $section_r->cut_children;
    map { $_->paste('last_child', $section_r) } $chunk->cut_children;
}

#
# Bump the admin_epoch if requested
#
if( $bump_epoch ){
    my $ae = $merge_t->root->{att}->{admin_epoch};
    $merge_t->root->set_att(admin_epoch => $ae + 1);
}

#
# Print to file if requested
#
if( $file ){
    open(OUT, '>' . $file )
	or die("$0: Failed to open output file \"" . $file . "\"\n");
    print("Printing to file: \"" . $file . "\"\n");
    select OUT;
    $merge_t->print;
    exit;
}

#
# Verify the new config
#
if ( $no_verify && !$dry_run ) {
    print "Skipping crm_verify... dangerous!!!\n";
} else {
    print "Running crm_verify...\n";
    $SIG{PIPE} = \&die_crm_verify;
    open(VERIFY, "|crm_verify -V --xml-pipe") || &die_crm_verify;
    select VERIFY;
    $merge_t->print('indented');
    close VERIFY || &die_crm_verify;
    select STDOUT;
    print "No errors\n" unless $?;
}
exit if $dry_run;

#
# Backup the CIB
#
unless( -d "$xmldir/backup" ){
    mkdir("$xmldir/backup")
	or die("$0: Backup directory \"$xmldir/backup\" doesn't exist and couldn't create\n");
}
my $backupfile = "$xmldir/backup/cib.xml_" . time();
open(BACKUP, ">$backupfile");
print BACKUP $cib;
close BACKUP;
print "CIB backup file is: $backupfile\n";

#
# Install the new config
#
print "Installing new configuration...\n";
$SIG{PIPE} = \&die_cibadmin;
open(CIBADMIN, "|cibadmin -V --bump --replace --xml-pipe") || &die_cibadmin;
select CIBADMIN;
$merge_t->print('indented');
close CIBADMIN || &die_cibadmin;;
select STDOUT;
print "Done.\n";

#
# Append error from cibadmin
#
sub die_cibadmin {
    die("\n$0: Problem running cibadmin: $! $?\n");
}

#
# Append error from crm_verify
#
sub die_crm_verify {
    die("\n$0: Problem running crm_verify: $! $?. New CIB has NOT been installed\n");
}

#
# Build a hash of the form
#  section => $chunk, ...
#
# Chunks are objects of type XML::Twig::Elt
#
sub build_xmlchunkhash {
    my %xmlchunks;
    foreach my $chunkfile ( &get_xmlchunkfiles ) {
	print "Parsing \"$chunkfile\"...\n";
	my $chunk_t = new XML::Twig(
	    # This should be redundant since a chunk
	    # should already be rooted at
	    # <configuration>
	    'twig_roots' => {'configuration' => 1},
	    comments => 'drop',
	    pretty_print => 'indented'
	    );

	$chunk_t->parsefile($chunkfile);
	my $chunk_r = $chunk_t->root;
	my @children = $chunk_r->children;

	foreach my $c (@children) {
	    if( defined($xmlchunks{$c->gi}) ){
		map { $_->paste('last_child', $xmlchunks{$c->gi}); } $c->cut_children;
	    }
	    else{
		$xmlchunks{$c->gi} = $c;
	    }
	}
    }
    return \%xmlchunks;
}

#
# Return an array of paths to XML chunks
#
sub get_xmlchunkfiles {
    opendir(XMLDIR, $xmldir) || die("$0: Could not open directory \"$xmldir\"\n");
    my @xmlfiles = map { $xmldir . '/' . $_ } grep(/\.xml$/, readdir(XMLDIR));
    return(sort { $a cmp $b } @xmlfiles);
}

#
# Usage
#
sub usage {
    die <<USAGE;

$0 [options...] xmldir
    
Creates and installs a new CIB from the configuration defined by .xml
files in the xmldir directory. Current configuration directives
(resources, constraints and nodes) are deleted and replaced with the
content from the .xml files.
    
Runs crm_verify before installing new CIB; will not install CIB if 
crm_verify reports any errors unless --no-verify option is given. This
is required if any resources have been deleted.
    
A backup of the CIB is created in the xmldir/backup directory.

Must be root to use.

Options:
  -h, --help        This message
  -n, --no-verify   Do not run crm_verify before installing new CIB;
                    required if you have deleted resources. Use with 
                    caution!
  -d, --dry-run     Dry run only; just runs crm_verify against merged XML
  -f, --file        Dump merged XML to file without updating CIB
  -b, --bump-epoch  Increment the admin_epoch attribute in the CIB 
                    (rarely needed)

USAGE
}
